import yfinance as yf
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import ta

symbol = 'CL=F'
data = yf.download(symbol, start='2010-01-01')

# Preprocess data
data['Close'] = data['Adj Close']
data = data.drop(['Adj Close'], axis=1)

# Feature engineering
data['SMA'] = data['Close'].rolling(window=50).mean()
data['EMA'] = data['Close'].ewm(span=50).mean()
data['Volume_Change'] = data['Volume'].pct_change()

# Calculate RSI
data['RSI'] = ta.momentum.RSIIndicator(close=data['Close'], window=14).rsi()

# Calculate Bollinger Bands
bollinger = ta.volatility.BollingerBands(close=data['Close'], window=20, window_dev=2)
data['Bollinger_High'] = bollinger.bollinger_hband()
data['Bollinger_Low'] = bollinger.bollinger_lband()

# Calculate MACD
macd = ta.trend.MACD(close=data['Close'], window_slow=26, window_fast=12, window_sign=9)
data['MACD'] = macd.macd()
data['MACD_Signal'] = macd.macd_signal()
data['MACD_Diff'] = macd.macd_diff()

# Handle any NaN values
data = data.dropna()

# Replace inf values with np.nan
data.replace([np.inf, -np.inf], np.nan, inplace=True)

# Drop rows with np.nan
data.dropna(inplace=True)

# Data normalization
scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(data)

# Prepare input and output for LSTM mode
lookback = 5
X = []
y = []

for i in range(lookback, len(data_scaled)):
    X.append(data_scaled[i - lookback:i, :])
    y.append(data_scaled[i, 3])

X, y = np.array(X), np.array(y)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define LSTM model
model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])),
    tf.keras.layers.LSTM(50, return_sequences=False),
    tf.keras.layers.Dense(25),
    tf.keras.layers.Dense(1)
])

# Compile and train the model
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, batch_size=64, epochs=100, validation_data=(X_test, y_test))

# Real-time prediction
def predict_next_price(symbol, model, scaler, lookback):
    data = yf.download(symbol, start='2010-01-01')
    data['Close'] = data['Adj Close']
    data = data.drop(['Adj Close'], axis=1)
    data['SMA'] = data['Close'].rolling(window=50).mean()

    # Add the missing features
    data['EMA'] = data['Close'].ewm(span=50).mean()
    data['Volume_Change'] = data['Volume'].pct_change()

    data['RSI'] = ta.momentum.rsi(data['Close'], window=14)
    bollinger = ta.volatility.BollingerBands(close=data['Close'], window=20, window_dev=2)
    data['Bollinger_High'] = bollinger.bollinger_hband()
    data['Bollinger_Low'] = bollinger.bollinger_lband()
    macd = ta.trend.MACD(close=data['Close'], window_slow=26, window_fast=12, window_sign=9)
    data['MACD'] = macd.macd()
    data['MACD_Signal'] = macd.macd_signal()
    data['MACD_Diff'] = macd.macd_diff()

    data = data.dropna()
    data.replace([np.inf, -np.inf], np.nan, inplace=True)
    data.dropna(inplace=True)
    data_scaled = scaler.transform(data)

    X_new = data_scaled[-lookback:]
    X_new = X_new.reshape((1, X_new.shape[0], X_new.shape[1]))
    y_new_pred = model.predict(X_new)

    dummy_array = np.zeros((1, data_scaled.shape[1]))
    dummy_array[:, 3] = y_new_pred[:, 0]
    inverse_transformed = scaler.inverse_transform(dummy_array)

    return inverse_transformed[0][3]


next_price = predict_next_price(symbol, model, scaler, lookback)
print("Next price prediction:", next_price)
